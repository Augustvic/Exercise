public class P39 {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> res = new LinkedList<>();
        backtracking(res, new LinkedList<>(), candidates, target, 0);
        return res;
    }

    public void backtracking(List<List<Integer>> res, List<Integer> list, int[] candidates, int target, int start) {
        if (target < 0)
            return;
        if (target == 0) {
            res.add(new LinkedList<>(list));
            return;
        }
        for (int i = start; i < candidates.length; i++) {
            list.add(candidates[i]);
            backtracking(res, list, candidates, target - candidates[i], i);
            list.remove(list.size() - 1);
        }
    }
}