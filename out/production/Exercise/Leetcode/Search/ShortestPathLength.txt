public class ShortestPathLength {
    public int min(int[][] grids, int tr, int tc) {
        final int[][] direction = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};
        final int m = grids.length;
        final int n = grids[0].length;
        Queue<Pair<Integer, Integer>> q = new LinkedList<>();
        q.add(new Pair<>(0, 0));
        int pathLength = 0;
        while (!q.isEmpty()) {
            int size = q.size();
            pathLength++;
            while (size-- > 0) {
                Pair<Integer, Integer> curr = q.poll();
                int cr = curr.getKey();
                int cc = curr.getValue();
                grids[cr][cc] = 0;
                for (int[] d : direction) {
                    int nr = cr + d[0];
                    int nc = cc + d[1];
                    if (nr < 0 || nr >= m || nc < 0 || nc >= n || grids[nr][nc] == 0)
                        continue;
                    if (nr == tr && nc == tc)
                        return pathLength;
                    q.add(new Pair<>(nr, nc));
                }
            }
        }
        return -1;
    }
}