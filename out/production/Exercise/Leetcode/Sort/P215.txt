public class P215 {
    public int findKthLargest(int[] nums, int k) {
        int l = 0;
        int r = nums.length - 1;
        k = nums.length - k;
        while (l < r) {
            int index = partition(nums, l, r);
            if (index == k)
                break;
            else if (index < k)
                l = index + 1;
            else
                r = index - 1;
        }
        return nums[k];
    }

    public int partition(int[] nums, int l, int r) {
        int pivot = r;
        while (l < r) {
            while (l < r && nums[l] < nums[pivot]) l++;
            while (l < r && nums[pivot] <= nums[r]) r--;
            swap(nums, l, r);
        }
        swap(nums, l, pivot);
        return l;
    }

    public void swap(int[] nums, int l, int r) {
        int t = nums[l];
        nums[l] = nums[r];
        nums[r] = t;
    }
}