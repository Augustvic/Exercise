public class P45 {
    public String minNumber(int[] nums) {
        quickSort(nums, 0, nums.length - 1);
        StringBuilder sb = new StringBuilder();
        for (int k : nums) {
            sb.append(k);
        }
        return sb.toString();
    }

    private void quickSort(int[] nums, int l, int r) {
        if (l < r) {
            int index = partition(nums, l, r);
            quickSort(nums, l, index - 1);
            quickSort(nums, index + 1, r);
        }
    }

    private int partition(int[] nums, int l, int r) {
        int pivot = r;
        while (l < r) {
            while (l < r && isPrev(nums[l], nums[pivot])) l++;
            while (l < r && !isPrev(nums[r], nums[pivot])) r--;
            swap(nums, l, r);
        }
        swap(nums, l, pivot);
        return l;
    }

    private void swap(int[] nums, int l, int r) {
        int t = nums[l];
        nums[l] = nums[r];
        nums[r] = t;
    }

    private boolean isPrev(int a, int b) {
        String ab = "" + a + b;
        String ba = "" + b + a;
        if (ab.length() != ba.length()) {
            return ab.length() < ba.length();
        }
        int index = 0;
        int len = ab.length();
        while (index < len && ab.charAt(index) == ba.charAt(index))
            index++;
        return index < len && ab.charAt(index) < ba.charAt(index);
    }
}