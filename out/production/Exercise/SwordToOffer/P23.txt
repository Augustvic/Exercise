public class P23 {
    public ListNode findEntry(ListNode head) {
        if (head == null || head.next == null)
            return null;
        ListNode meet = hasCycle(head);
        if (meet != null) {
            ListNode p = meet.next;
            int lengthOfCycle = 1;
            while (p != meet) {
                lengthOfCycle++;
                p = p.next;
            }
            p = head;
            for (int i = 0; i < lengthOfCycle; i++)
                p = p.next;
            ListNode q = head;
            while (p != q) {
                p = p.next;
                q = q.next;
            }
            return p;
        }
    }

    private ListNode hasCycle(ListNode head) {
        ListNode slow = head;
        ListNode fast = head.next;
        while (fast != null && fast.next != null && fast != slow) {
            fast = fast.next.next;
            slow = slow.next;
        }
        if (fast == null || fast.next == null)
            return null;
        return fast;
    }
}