public class P45 {
    public String min(int[] nums) {
        if (nums == null || nums.length == 0)
            return null;
        quickSort(nums, 0, nums.length - 1);
        String ret = "";
        for (int num : nums)
            ret += String.valueOf(num);
        int start = 0;
        while (ret.charAt(start++) == '0') {
            ret = ret.substring(1);
        }
        return ret;
    }

    private void quickSort(int[] nums, int l, int r) {
        if (l >= r)
            return;
        int index = partition(nums, l, r);
        quickSort(nums, l, index - 1);
        quickSort(nums, index + 1, r);
    }

    private int partition(int[] nums, int l, int r) {
        int pivot = r;
        while (l < r) {
            while (l < r && isQualified(nums[l], nums[pivot])) l++;
            while (l < r && !isQualified(nums[r], nums[pivot])) r--;
            swap(nums, l, r);
        }
        swap(nums, l, pivot);
        return l;
    }

    public boolean isQualified(int x, int y) {
        String xy = String.valueOf(x) + String.valueOf(y);
        String yx = String.valueOf(y) + String.valueOf(x);
        boolean flag = false;
        if (xy.length() < yx.length())
            return true;
        else if (xy.length() > yx.length())
            return false;
        else {
            int index = 0;
            int len = xy.length();
            while (index < len && xy.charAt(index) == yx.charAt(index))
                index++;
            return index < len && xy.charAt(index) < yx.charAt(index);
        }
    }

    private void swap(int[] nums, int l, int r) {
        int temp = nums[l];
        nums[l] = nums[r];
        nums[r] = temp;
    }
}