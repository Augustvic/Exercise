public class P61 {
    public boolean isContinuous(int[] nums) {
        if (nums == null || nums.length == 0)
            return false;
        int len = nums.length;
        quickSort(nums, 0, len - 1);
        int index = 0;
        int numOfZero = 0;
        while (index < len && nums[index] == 0) {
            numOfZero++;
            index++;
        }
        while (index + 1 < len) {
            if (nums[index] != nums[index + 1] - 1)
                numOfZero -= (nums[index + 1] - nums[index] - 1);
            if (numOfZero < 0)
                return false;
            index++;
        }
        return true;
    }

    private void quickSort(int[] nums, int l, int r) {
        if (l >= r)
            return;
        int index = partition(nums, l, r);
        quickSort(nums, l, index - 1);
        quickSort(nums, index + 1, r);
    }

    private int partition(int[] nums, int l, int r) {
        int pivot = r;
        while (l < r) {
            while (l < r && nums[l] < nums[pivot]) l++;
            while (l < r && nums[pivot] <= nums[r]) r--;
            swap(nums, l, r);
        }
        swap(nums, l, pivot);
        return l;
    }

    private void swap(int[] nums, int l, int r) {
        int t = nums[l];
        nums[l] = nums[r];
        nums[r] = t;
    }
}