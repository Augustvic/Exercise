public class P68 {
    public TreeNode getCommonParentNode(TreeNode root, TreeNode r1, TreeNode r2) {
        if (root == null || r1 == null || r2 == null)
            return null;
        LinkedList<TreeNode> l1 = getPath(root, r1);
        LinkedList<TreeNode> l2 = getPath(root, r2);
        TreeNode ret = null;
        while (!l1.isEmpty() && !l2.isEmpty() && l1.getFirst() == l2.getFirst()) {
            ret = l1.getFirst();
            l1.removeFirst();
            l2.removeFirst();
        }
        return ret;
    }

    private LinkedList<TreeNode> getPath(TreeNode root, TreeNode r1) {
        if (root == null || r1 == null)
            return null;
        LinkedList<TreeNode> l = new LinkedList<>();
        getPathHelp(root, r1, l);
        return l;
    }

    private boolean getPathHelp(TreeNode root, TreeNode r1, LinkedList<TreeNode> l) {
        if (root == null) {
            return false;
        }
        if (root == r1) {
            l.add(root);
            return true;
        }
        boolean found = false;
        l.add(root);
        Iterator<TreeNode> it = root.child.iterator();
        while (!found && it.hasNext()) {
            found = getPathHelp(it.next(), r1, l);
        }
        if (!found)
            l.removeLast();
        return found;
    }
}