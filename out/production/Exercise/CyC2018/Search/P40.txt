public class P40 {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> res = new LinkedList<>();
        Arrays.sort(candidates);
        boolean[] visited = new boolean[candidates.length];
        backtracking(res, new LinkedList<>(), candidates, target, 0);
        return res;
    }

    public void backtracking(List<List<Integer>> res, List<Integer> list, int[] candidates, int target, int start, boolean[] visited) {
        if (target < 0)
            return;
        if (target == 0) {
            res.add(new LinkedList<>(list));
            return;
        }
        for (int i = start; i < candidates.length; i++) {
            if (i != 0 && candidates[i - 1] == candidates[i] && !visited[i - 1])
                continue;
            list.add(candidates[i]);
            visited[i] = true;
            backtracking(res, list, candidates, target - candidates[i], i + 1, visited);
            visited[i] = false;
            list.remove(list.size() - 1);
        }
    }
}