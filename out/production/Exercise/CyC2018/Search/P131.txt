public class P131 {
    public List<List<String>> partition(String s) {
        List<List<String>> res = new LinkedList<>();
        backtracking(res, s, new LinkedList<>());
        return res;
    }

    public void backtracking(List<List<String>> res, String s, List<String> list) {
        if (s.length() == 0) {
            res.add(new LinkedList<>(list));
            return;
        }
        for (int i = 0; i < s.length(); i++) {
            if (isPalindrome(s, 0, i)) {
                list.add(s.substring(0, i + 1));
                backtracking(res, s.substring(i + 1), list);
                list.remove(list.size() - 1);
            }
        }
    }

    public boolean isPalindrome(String s, int begin, int end) {
        while (begin < end) {
            if (s.charAt(begin++) != s.charAt(end--))
                return false;
        }
        return true;
    }
}