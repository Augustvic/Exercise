public class P257 {
    public List<String> binaryTreePaths(TreeNode root) {
        List<String> res = new LinkedList<>();
        if (root == null)
            return res;
        List<Integer> list = new LinkedList<>();
        backtracking(res, root, list);
        return res;
    }

    public void backtracking(List<String> res, TreeNode root, List<Integer> list) {
        if (root == null) {
            return;
        }
        list.add(root.val);
        if (isLeaf(root)) {
            res.add(buildPath(list));
        }
        else {
            backtracking(res, root.left, list);
            backtracking(res, root.right, list);
        }
        list.remove(list.size() - 1);
    }

    public boolean isLeaf(TreeNode root) {
        return root.left == null && root.right == null;
    }

    public String buildPath(List<Integer> list) {
        StringBuilder sb = new StringBuilder();
        sb.append(list.get(0));
        for (int i = 1; i < list.size(); i++) {
            sb.append("->");
            sb.append(list.get(i));
        }
        return sb.toString();
    }
}