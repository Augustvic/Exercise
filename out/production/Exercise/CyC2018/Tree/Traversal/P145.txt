/**
  * 前序遍历为 root -> left -> right，后序遍历为 left -> right -> root。可以修改
  * 前序遍历成为 root -> right -> left，那么这个顺序就和后序遍历正好相反
  */

public class P145 {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> ret = new LinkedList<>();
        Stack<TreeNode> st = new Stack<>();
        st.push(root);
        while (!st.isEmpty()) {
            TreeNode curr = st.pop();
            ret.add(curr.val);
            if (root.left != null)
                st.push(root.left);
            if (root.right != null)
                st.push(root.right);
        }
        Collections.reverse(ret);
        return ret;
    }
}