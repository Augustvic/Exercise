public class P123 {
    public int maxProfit(int[] prices) {
        int b0 = 0;
        int s0 = 0;
        int b1 = Integer.MIN_VALUE;
        int s1 = Integer.MIN_VALUE;
        for (int i = 0; i < prices.length; i++) {
            s0 = Math.max(s0, s1 + prices[i]);
            s1 = Math.max(s1, b0 - prices[i]);
            b0 = Math.max(b0, b1 + prices[i]);
            b1 = Math.max(b1, -prices[i]);
        }
        return Math.max(0, s0);
    }

// k = 2 的情况，详见 leetcode
// 1 表示持有，0 表示没有持有
dp[i][1][1] = max(dp[i - 1][1][1], -prices[i]);
dp[i][1][0] = max(dp[i - 1][1][0], dp[i - 1][1][1] + prices[i]);
dp[i][2][1] = max(dp[i - 1][2][1], dp[i - 1][1][0] - prices[i])
dp[i][2][0] = max(dp[i - 1][2][0], dp[i - 1][2][1] + prices[i])
}