public class P5 {
    //动态规划构造矩阵，矩阵的元素为true或者false
    public String longestPalindrome(String s) {
        if (s == null || s.length() == 0)
            return s;
        if (s.length() == 1)
            return s;
        if (s.length() == 2)
            return s.charAt(0) == s.charAt(1) ? s : s.substring(1);
        boolean[][] matrix = new boolean[s.length()][s.length()];
        for (int i = 0; i < s.length(); i++)
            matrix[i][i] = true;
        for (int i = 0; i < s.length() - 1; i++)
            matrix[i][i + 1] = (s.charAt(i) == s.charAt(i + 1));
        for (int k = 2; k < s.length(); k++) {
            for (int i = 0, j = k; j < s.length(); i++, j++)
                matrix[i][j] = matrix[i + 1][j - 1] && (s.charAt(i) == s.charAt(j));
        }
        for (int k = s.length() - 1; k >= 0; k--) {
            for (int i = 0, j = k; j < s.length(); i++, j++) {
                if (matrix[i][j])
                    return s.substring(i, j + 1);
            }
        }
        return "";
    }

    public String longestPalindrome(String s) {
        if (s == null || s.length() == 0)
            return s;
        int startResult = 0;
        int endResult = 0;
        for (int i = 0; i < s.length(); i++) {
            for (int j = 0; j < 2; j++) {
                int start = i + j;
                int end = i;
                while (start - 1 >= 0 && end + 1 < s.length() && s.charAt(start - 1) == s.charAt(end + 1)) {
                    start--;
                    end++;
                }
                if (end - start > endResult - startResult) {
                    startResult = start;
                    endResult = end;
                }
            }
        }
        return s.substring(startResult, endResult + 1);
    }
}