public class P79 {
    private int[][] direction = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};

    public boolean exist(char[][] board, String word) {
        if (board == null || board.length == 0 || board[0].length == 0 || word == null || word.length() == 0)
            return false;
        boolean[][] visited = new boolean[board.length][board[0].length];
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if (backtracking(board, word, visited, i, j))
                    return true;
            }
        }
        return false;
    }

    public boolean backtracking(char[][] board, String word, boolean[][] visited, int i, int j) {
        if (word.length() == 0)
            return true;
        if (i < 0 || i >= board.length || j < 0 || j >= board[0].length || board[i][j] != word.charAt(0))
            return false;
        visited[i][j] = true;
        for (int[] d : direction) {
            if (backtracking(board, word.substring(1), visited, i + d[0], j + d[1]))
                return true;
        }
        visited[i][j] = false;
        return false;
    }
}