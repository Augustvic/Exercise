public class P37 {
    boolean[][] rowsUsed = new boolean[9][10];
    boolean[][] columnsUsed = new boolean[9][10];
    boolean[][] cubesUsed = new boolean[9][10];

    public void solveSudoku(char[][] board) {
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if (board[i][j] != '.') {
                    int num = board[i][j] - '0';
                    rowsUsed[i][num] = true;
                    columnsUsed[j][num] = true;
                    cubesUsed[cubeNum(i, j)][num] = true;
                }
            }
        }
        backtracking(board, 0, 0);
    }

    public boolean backtracking(char[][] board, int r, int c) {
        while (r < 9 && board[r][c] != '.') {
            r = c == 8 ? r + 1 : r;
            c = c == 8 ? 0 : c + 1;
        }
        if (r == 9)
            return true;
        for (int num = 1; num <= 9; num++) {
            if ((!rowsUsed[r][num]) && (!columnsUsed[c][num]) && (!cubesUsed[cubeNum(r, c)][num])) {
                board[r][c] = (char)(num + '0');
                rowsUsed[r][num] = true;
                columnsUsed[c][num] = true;
                cubesUsed[cubeNum(r, c)][num] = true;
                if (backtracking(board, r, c))
                    return true;
                board[r][c] ='.';
                rowsUsed[r][num] = false;
                columnsUsed[c][num] = false;
                cubesUsed[cubeNum(r, c)][num] = false;
            }
        }
        return false;
    }

    public int cubeNum(int row, int column) {
        int i = row / 3;
        int j = column / 3;
        return i * 3 + j;
    }
}