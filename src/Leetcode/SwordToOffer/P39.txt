public class P39 {
    public int moreThanHalfOptimal(int[] nums) {
        if (nums == null || nums.length == 0)
            return 0;
        int times = 0;
        int num = nums[0];
        for (int i = 1; i < nums.length; i++) {
            if (times == 0) {
                num = nums[i];
                times = 1;
            }
            else {
                if (nums[i] == num)
                    times++;
                else
                    times--;
            }
        }
        return check(nums, num) ? num : 0;
    }

    private boolean check(int[] nums, int num) {
        int count = 0;
        int half = nums.length / 2;
        for (int k : nums) {
            if (k == num)
                count++;
            if (count > half)
                return true;
        }
        return false;
    }

    // 对于数组 {1, 2, 3, 3, 3} 会得到错误结果
    public int MoreThanHalfNum_Solution2(int[] array) {
        if (array == null || array.length == 0)
            return 0;
        if (array.length == 1)
            return array[0];
        int l = array.length / 2 - 1;
        int r = array.length / 2;
        int m = 0;
        if ((m = getIndex(array, 0, array.length - 1, l)) == getIndex(array, 0, array.length - 1, r))
            return m;
        return 0;
    }
    public int getIndex(int[] array, int l, int r, int k) {
        while (l < r) {
            int index = partition(array, l, r);
            if (index == k) {
                return array[k];
            }
            else if (index > k) {
                r = index - 1;
            }
            else
                l = index + 1;
        }
        return -1;
    }

    private int partition(int[] array, int l, int r) {
        int pivot = r;
        while (l < r) {
            while (l < r && array[l] < array[pivot]) l++;
            while (l < r && array[r] >= array[pivot]) r--;
            swap(array, l, r);
        }
        swap(array, l, pivot);
        return l;
    }

    private void swap(int[] array, int l, int r) {
        int t = array[l];
        array[l] = array[r];
        array[r] = t;
    }

}