public class P18 {
    public ListNode delete(ListNode head, ListNode toBeDeleted) {
        if (head == null || toBeDeleted == null)
            return null;
        if (head.next == null) {
            head = null;
        }
        else if (toBeDeleted.next == null) {
            ListNode curr = head;
            while (curr.next != toBeDeleted)
                curr = curr.next;
            curr.next = null;
        }
        else {
            ListNode next = toBeDeleted.next;
            toBeDeleted.val = next.val;
            toBeDeleted.next = next.next;
        }
        return head;
    }

     public ListNode deleteDumplication(ListNode head) {
         if (head == null || head.next == null)
             return head;
         ListNode pre = head;
         while (pre != null) {
             ListNode curr = pre.next;
             while (curr != null && curr.val == pre.val)
                 curr = curr.next;
             pre.next = curr;
             pre = curr;
         }
         return head;
     }

    public ListNode deleteDuplication(ListNode pHead)
    {
        ListNode curr = new ListNode(0);
        ListNode preHead = curr;
        curr.next = pHead;
        while (curr != null && curr.next != null) {
            ListNode p = curr.next;
            while (p.next != null && p.next.val == p.val) {
                p = p.next;
            }
            if (p != curr.next)
                curr.next = p.next;
            else
                curr = curr.next;
        }
        return preHead.next;
    }
}