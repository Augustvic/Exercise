public class QuickSort {
    public void quickSort(int[] nums) {
        if (nums == null || nums.length == 0)
            return;
        quickSortHelp(nums, 0, nums.length - 1);
    }

    public void quickSortHelp(int[] nums, int l, int r) {
        if (l < r) {
            int index = partition(nums, l, r);
            quickSortHelp(nums, l, index - 1);
            quickSortHelp(nums, index + 1, r);
        }
    }

    public int partition(int[] nums, int l, int r) {
        int pivot = r;
        while (l < r) {
            while (l < r && nums[l] < nums[pivot]) l++;
            while (l < r && nums[r] >= nums[pivot]) r--;
            swap(nums, l, r);
        }
        swap(nums, l, pivot);
        return l;
    }

    public void swap(int[] nums, int l, int r) {
        int t = nums[l];
        nums[l] = nums[r];
        nums[r] = t;
    }
}


public class threeWayQuickSort {
    public void threeWayQuickSort(int[] nums) {
        if (nums == null || nums.length == 0)
            return;
        threeWayQuickSortHelp(nums, 0, nums.length - 1);
    }

    public void threeWayQuickSortHelp(int[] nums, int l, int r) {
        if (l >= r)
            return;
        int pivot = nums[l];
        // lt 是中间段的起点，rt 是中间段的终点
        // 把小的移到左边，大的移到右边，中间剩下的就是等于
        int lt = l;
        int i = l + 1;
        int rt = r;
        while (i <= rt) {
            if (nums[i] < pivot)
                swap(nums, lt++, i++);
            else if (nums[i] > pivot)
                swap(nums, i, rt--);
            else
                i++;
        }
        threeWayQuickSortHelp(nums, l, lt - 1);
        threeWayQuickSortHelp(nums, rt + 1, r);
    }
}