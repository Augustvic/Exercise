public class HeapSort {
    public void heapSort(int[] nums) {
        if (nums == null || nums.length == 0)
            return;
        buildHeap(nums);
        for (int i = nums.length - 1; i > 0; i--) {
            swap(nums, 0, i);
            siftDown(nums, 0, i - 1);
        }
    }

    public void buildHeap(int[] nums) {
        for (int i = nums.length / 2 - 1; i >= 0; i--) {
            siftDown(nums, i, nums.length - 1);
        }
    }

    public void siftDown(int[] nums, int low, int high) {
        int t = nums[low];
        for (int k = 2 * low + 1; k <= high; k = 2 * k + 1) {
            if (k + 1 <= high && nums[k] < nums[k + 1])
                k = k + 1;
            if (t < nums[k]) {
                nums[low] = nums[k];
                low = k;
            }
            else {
                break;
            }
        }
        nums[low] = t;
    }

    public void swap(int[] nums, int l, int r) {
        int t = nums[l];
        nums[l] = nums[r];
        nums[r] = t;
    }
}