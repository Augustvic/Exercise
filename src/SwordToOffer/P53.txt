public class P53 {
    public int count(int[] nums, int k) {
        if (nums == null || nums.length == 0)
            return -1;
        int first = firstIndex(nums, k);
        int last = lastIndex(nums, k);
        if (first == -1 && last == -1)
            return 0;
        return last - first + 1;
    }

    private int firstIndex(int[] nums, int k) {
        int l = 0;
        int r = nums.length - 1;
        while (l < r) {
            int mid = l + (r - l + 1) / 2;
            if (nums[mid] == k) {
                if (nums[mid - 1] == k) {
                    r = mid - 1;
                }
                else
                    return mid;
            }
            else if (nums[mid] > k) {
                r = mid - 1;
            }
            else
                l = mid + 1;
        }
        return nums[l] == k ? l : -1;
    }

    private int lastIndex(int[] nums, int k) {
        int l = 0;
        int r = nums.length - 1;
        while (l < r) {
            int mid = l + (r - l) / 2;
            if (nums[mid] == k) {
                if (nums[mid + 1] == k) {
                    l = mid + 1;
                }
                else
                    return mid;
            }
            else if (nums[mid] > k) {
                r = mid - 1;
            }
            else
                l = mid + 1;
        }
        return nums[l] == k ? l : -1;
    }

    public int missingNumber(int[] nums) {
        int l = 0;
        int r = nums.length - 1;
        while (l < r) {
            int mid = l + (r - l) / 2;
            if (nums[mid] == mid) {
                l = mid + 1;
            }
            else {
                r = mid;
            }
        }
        return nums[l] != l ? l : -1;
    }

    public int numberSameAsIndex(int[] nums) {
        int l = 0;
        int r = nums.length - 1;
        while (l < r) {
            int mid = l + (r - l) / 2;
            if (nums[mid] == mid) {
                return mid;
            }
            else if (nums[mid] > mid) {
                r = mid;
            }
            else
                l = mid + 1;
        }
        return -1;
    }
}