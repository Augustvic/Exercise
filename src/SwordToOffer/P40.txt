public class P40 {

    public int[] find(int[] nums, int k) {
        if (nums == null || nums.length == 0)
            return null;
        int[] ret = new int[k];
        int l = 0;
        int r = nums.length - 1;
        while (l < r) {
            int index = partition(nums, l, r);
            if (index == k - 1) {
                System.arraycopy(nums, 0, ret, 0, k);
                break;
            }
            else if (index > k - 1) {
                r = index - 1;
            }
            else
                l = index + 1;
        }
        return ret;
    }

    private int partition(int[] nums, int l, int r) {
        int pivot = r;
        while (l < r) {
            while (l < r && nums[l] < nums[pivot]) l++;
            while (l < r && nums[r] >= nums[pivot]) r--;
            swap(nums, l, r);
        }
        swap(nums, l, pivot);
        return l;
    }

    private void swap(int[] nums, int l, int r) {
        int tmp = nums[l];
        nums[l] = nums[r];
        nums[r] = tmp;
    }

    public int[] findOptimal(int[] nums, int k) {
        if (nums == null || nums.length == 0)
            return null;
        PriorityQueue<Integer> minHeap = new PriorityQueue<>(new Comparator<Integer>() {
            @Override
            public int compare(Integer o1, Integer o2) {
                return o2 - o1;
            }
        });
        for (int i = 0; i < nums.length; i++) {
            if (minHeap.size() < k) {
                minHeap.add(nums[i]);
            }
            else {
                if (nums[i] < minHeap.peek()) {
                    minHeap.poll();
                    minHeap.add(nums[i]);
                }
            }
        }
        int[] ret = new int[k];
        int pos = 0;
        for(int val : minHeap)
            ret[pos++] = val;
        return ret;
    }
}