public class P51 {
    private List<List<String>> solution;
    private boolean[] columnUsed;
    private boolean[] diagonals45Used;
    private boolean[] diagonals135Used;
    private char[][] nQueens;
    int n;

    public List<List<String>> solveNQueens(int n) {
        solution = new LinkedList<>();
        nQueens = new char[n][n];
        for (int i = 0; i < nQueens.length; i++) {
            Arrays.fill(nQueens[i], '.');
        }
        columnUsed = new boolean[n];
        diagonals45Used = new boolean[2 * n - 1];
        diagonals135Used = new boolean[2 * n - 1];
        this.n = n;
        backtracking(0);
        return solution;
    }

    public void backtracking(int row) {
        if (row == n) {
            List<String> list = new LinkedList<>();
            for (char[] cs : nQueens)
                list.add(new String(cs));
            solution.add(list);
            return;
        }
        for (int col = 0; col < n; col++) {
            int diagonal45Idx = row + col;
            int diagonal135Idx = n - 1 - (col - row);
            if (columnUsed[col] || diagonals45Used[diagonal45Idx] || diagonals135Used[diagonal135Idx])
                continue;
            columnUsed[col] = true;
            diagonals45Used[diagonal45Idx] = true;
            diagonals135Used[diagonal135Idx] = true;
            nQueens[row][col] = 'Q';
            backtracking(row + 1);
            columnUsed[col] = false;
            diagonals45Used[diagonal45Idx] = false;
            diagonals135Used[diagonal135Idx] = false;
            nQueens[row][col] = '.';
        }
    }
}