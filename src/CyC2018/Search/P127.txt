public class P127 {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        wordList.add(beginWord);
        int n = wordList.size();
        int start = n - 1;
        int end = 0;
        // 找到 endWord 在 wordList 中的位置
        while (end < n && !wordList.get(end).equals(endWord))
            end++;
        if (end == n)
            return 0;
        List<Integer>[] graphic = buildGraphic(wordList);
        return getShortestPath(graphic, wordList, start, end);
    }

    public List<Integer>[] buildGraphic(List<String> wordList) {
        List<Integer>[] graphic = new List[wordList.size()];
        for (int i = 0; i < wordList.size(); i++) {
            graphic[i] = new LinkedList<>();
            // 找到所有和当前单词只相差一个字符的单词
            for (int j = 0; j < wordList.size(); j++) {
                if (j != i && isConnect(wordList.get(i), wordList.get(j)))
                    graphic[i].add(j);
            }
        }
        return graphic;
    }

    // 判断两个单词是否只相差一个字符
    public boolean isConnect(String s1, String s2) {
        if (s1.length() != s2.length())
            return false;
        int diff = 0;
        for (int i = 0; i < s1.length() && diff <= 1; i++) {
            if (s1.charAt(i) != s2.charAt(i))
                diff++;
        }
        return diff == 1;
    }

    // 广度优先遍历图，得到想要的单词路径则返回，即为最短路径
    public int getShortestPath(List<Integer>[] graphic, List<String> wordList, int start, int end) {
        Queue<Integer> queue = new LinkedList<>();
        boolean[] marked = new boolean[wordList.size()];
        queue.add(start);
        marked[start] = true;
        int path = 0;
        while (!queue.isEmpty()) {
            int size = queue.size();
            path++;
            while (size-- > 0) {
                int curr = queue.poll();
                for (int next : graphic[curr]) {
                    if (next == end)
                        return path + 1;
                    if (marked[next])
                        continue;
                    marked[next] = true;
                    queue.add(next);
                }
            }
        }
        return 0;
    }
}