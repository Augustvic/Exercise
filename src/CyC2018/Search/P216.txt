public class P216 {
    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> res = new LinkedList<>();
        backtracking(res, new LinkedList<>(), k, n, 1);
        return res;
    }

    public void backtracking(List<List<Integer>> res, List<Integer> list, int k, int n, int start) {
        if (k == 0 && n == 0) {
            res.add(new LinkedList(list));
            return;
        }
        if (k == 0 || n == 0)
            return;
        for (int i = start; i <= 9; i++) {
            list.add(i);
            backtracking(res, list, k - 1, n - i, i + 1);
            list.remove(list.size() - 1);
        }
    }
}